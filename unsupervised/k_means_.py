# -*- coding: utf-8 -*-
"""k_means_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z-ZyRSKV2BHNTqTXDq0MMiqEA93A47Aq

#Clustering customer data
#Goal: to find reasonable clusters of customers for marketing segmentation and study
LINK: https://archive.ics.uci.edu/ml/datasets/bank+marketing

   This dataset is public available for research. The details are described in [Moro et al., 2011]. 


      [Moro et al., 2011] S. Moro, R. Laureano and P. Cortez. Using Data Mining for Bank Direct Marketing: An Application of the CRISP-DM Methodology. 
      In P. Novais et al. (Eds.), Proceedings of the European Simulation and Modelling Conference - ESM'2011, pp. 117-121, Guimar√£es, Portugal, October, 2011. EUROSIS.

      Available at: [pdf] http://hdl.handle.net/1822/14838
                    [bib] http://www3.dsi.uminho.pt/pcortez/bib/2011-esm-1.txt
     For more information, read [Moro et al., 2011].

       # bank client data:
    1 - age (numeric)
    2 - job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')
    3 - marital : marital status (categorical: 'divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)
    4 - education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')
    5 - default: has credit in default? (categorical: 'no','yes','unknown')
    6 - housing: has housing loan? (categorical: 'no','yes','unknown')
    7 - loan: has personal loan? (categorical: 'no','yes','unknown')
    # related with the last contact of the current campaign:
    8 - contact: contact communication type (categorical: 'cellular','telephone')
    9 - month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')
    10 - day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri')
    11 - duration: last contact duration, in seconds (numeric). Important note: this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.
    # other attributes:
    12 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)
    13 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)
    14 - previous: number of contacts performed before this campaign and for this client (numeric)
    15 - poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success')
    # social and economic context attributes
    16 - emp.var.rate: employment variation rate - quarterly indicator (numeric)
    17 - cons.price.idx: consumer price index - monthly indicator (numeric)
    18 - cons.conf.idx: consumer confidence index - monthly indicator (numeric)
    19 - euribor3m: euribor 3 month rate - daily indicator (numeric)
    20 - nr.employed: number of employees - quarterly indicator (numeric)
    21 - y - has the client subscribed a term deposit? (binary: 'yes','no')
"""

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('./data/bank-full.csv')
df

df.info()

df.describe()

plt.figure(figsize=(10, 6), dpi=120)
sns.histplot(data=df, x='age', bins=50, kde=True, hue='loan')
# the histoplot shows three catagories of loan ,which is one estimation of we can make 3 clusters but we need to analyse more

# visual representation of days passed after contacted with client from privious campaign
plt.figure(figsize=(8, 6), dpi=120)
sns.histplot(data=df[df['pdays'] != 999], x='pdays')

plt.figure(figsize=(8, 6), dpi=100)
# sns.histplot(data = df, x = 'education',hue = 'subscribed')
sns.histplot(data=df, x='duration', hue='housing')
# plt.xticks(rotation = 90)
plt.xlim(0, 1000)

# sns.countplot(data = df,x = 'job')
sns.countplot(data=df, x='education', hue='default')
plt.xticks(rotation=90)

X = pd.get_dummies(df)

scale = StandardScaler()
scaled_X = scale.fit_transform(X)

model = KMeans(n_clusters=6, n_init='auto')

cluster_labels = model.fit_predict(scaled_X)

# some of squared distance which represents how well the model made clusters. good model  reduce distance of each datapoint form cetoroid making optimum clusters
model.inertia_

cluster_labels

# adding cluster column to the X dataset to know which row belongs to which cluster,act as some kind of lebel
X['Clusters'] = cluster_labels
X

# seeing which values are considered important for making clusters
plt.figure(figsize=(12, 6), dpi=100)
X.corr()['Clusters'].iloc[:-1].sort_values().plot(kind='bar')

ssd = []
for k in range(3, 15):
    test_model = KMeans(n_clusters=k)
    test_model.fit(scaled_X)
    ssd.append(test_model.inertia_)

plt.plot(ssd, 'o--')
